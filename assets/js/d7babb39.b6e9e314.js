"use strict";(self.webpackChunkzio_http_docs=self.webpackChunkzio_http_docs||[]).push([[525],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),h=s(n),u=o,k=h["".concat(l,".").concat(u)]||h[u]||d[u]||r;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=h;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6918:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],c={title:"Socket",sidebar_label:"Socket"},l=void 0,s={unversionedId:"v1.x/dsl/socket/socket",id:"v1.x/dsl/socket/socket",isDocsHomePage:!1,title:"Socket",description:"Websocket support can be added to your Http application using the same Http domain, something like this \u2014",source:"@site/docs/v1.x/dsl/socket/socket.md",sourceDirName:"v1.x/dsl/socket",slug:"/v1.x/dsl/socket/socket",permalink:"/zio-http/docs/v1.x/dsl/socket/socket",tags:[],version:"current",frontMatter:{title:"Socket",sidebar_label:"Socket"},sidebar:"tutorialSidebar",previous:{title:"Middleware",permalink:"/zio-http/docs/v1.x/dsl/middleware"},next:{title:"WebSocketFrame",permalink:"/zio-http/docs/v1.x/dsl/socket/websocketframe"}},p=[{value:"Channel",id:"channel",children:[],level:2},{value:"ChannelEvents",id:"channelevents",children:[],level:2},{value:"Using <code>Http</code>",id:"using-http",children:[],level:2},{value:"SocketApp",id:"socketapp",children:[],level:2}],d={toc:p};function h(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Websocket support can be added to your Http application using the same ",(0,r.kt)("inlineCode",{parentName:"p"},"Http")," domain, something like this \u2014"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zhttp.http._\nimport zhttp.socket._\n\nval socket = Http.collectZIO[WebSocketChannelEvent] {\n  case ChannelEvent(ch, ChannelRead(WebSocketFrame.Text("foo"))) =>\n    ch.writeAndFlush(WebSocketFrame.text("bar"))\n}\n\nval http = Http.collectZIO[Request] {\n  case Method.GET -> !! / "subscriptions" => socket.toSocketApp.toResponse\n}\n')),(0,r.kt)("p",null,"The WebSocket API leverages the already powerful ",(0,r.kt)("inlineCode",{parentName:"p"},"Http")," domain to write web socket apps. The difference is that instead\nof collecting ",(0,r.kt)("inlineCode",{parentName:"p"},"Request")," we collect ",(0,r.kt)("inlineCode",{parentName:"p"},"ChannelEvent")," or more specifically ",(0,r.kt)("inlineCode",{parentName:"p"},"WebSocketChannelEvent"),". And, instead of\nreturning\na ",(0,r.kt)("inlineCode",{parentName:"p"},"Response")," we return ",(0,r.kt)("inlineCode",{parentName:"p"},"Unit"),", because we use the channel (which is available in the event) to write content directly."),(0,r.kt)("h2",{id:"channel"},"Channel"),(0,r.kt)("p",null,"Essentially whenever there is a connection created between a server and client a channel is created on both sides. The\nchannel is a low level api that allows us to send and receive arbitrary messages."),(0,r.kt)("p",null,"When we upgrade a Http connection to WebSocket, we create a specialized channel that only allows websocket frames to be\nsent and received. The access to channel is available thru the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChannelEvent")," api."),(0,r.kt)("h2",{id:"channelevents"},"ChannelEvents"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"ChannelEvent")," is an immutable, type-safe representation of an event that's happened on a channel and it looks like\nthis \u2014"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"case class ChannelEvent[A, B](channel: Channel[A], event: Event[B])\n")),(0,r.kt)("p",null,"It contains two elements \u2014 The ",(0,r.kt)("strong",{parentName:"p"},"Channel")," on which the event was triggered and the actual ",(0,r.kt)("strong",{parentName:"p"},"Event")," that was triggered.\nThe\ntype param ",(0,r.kt)("inlineCode",{parentName:"p"},"A")," on the Channel represents the kind of message one can ",(0,r.kt)("strong",{parentName:"p"},"write")," using the channel and the type param ",(0,r.kt)("inlineCode",{parentName:"p"},"B"),"\nrepresents the kind of messages that can be received on the channel."),(0,r.kt)("p",null,"The type ",(0,r.kt)("inlineCode",{parentName:"p"},"WebSocketChannelEvent")," is a type alias to ",(0,r.kt)("inlineCode",{parentName:"p"},"ChannelEvent[WebsocketFrame, WebSocketFrame]"),". Meaning a channel\nthat only accepts ",(0,r.kt)("inlineCode",{parentName:"p"},"WebSocketFrame")," and produces ",(0,r.kt)("inlineCode",{parentName:"p"},"WebSocketFrame")," type of messages."),(0,r.kt)("h2",{id:"using-http"},"Using ",(0,r.kt)("inlineCode",{parentName:"h2"},"Http")),(0,r.kt)("p",null,"We can use ",(0,r.kt)("inlineCode",{parentName:"p"},"Http.collect")," to select the events that we care about for our use case, like in the above example we are\nonly interested in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChannelRead")," event. There are other life cycle events such as ",(0,r.kt)("inlineCode",{parentName:"p"},"ChannelRegistered"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"ChannelUnregistered")," that one might want to hook onto for some other use cases."),(0,r.kt)("p",null,"The main benefit of using ",(0,r.kt)("inlineCode",{parentName:"p"},"Http")," is that one can write custom middlewares that can process incoming and outgoing\nmessages easily, for eg:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val userAction = Http.collect[ChannelEvent[Action, Command]] {\n  case CreateAccount(name, password) => ???\n  case DeleteAccount(id) => ???\n}\n\nval codec: Middleware[Any, Nothing, ChannelEvent[Action, Command], Unit, WebSocketChannelEvent, Unit]\n\nval socket = userAction @@ codec\n")),(0,r.kt)("h2",{id:"socketapp"},"SocketApp"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Http")," that accepts ",(0,r.kt)("inlineCode",{parentName:"p"},"WebSocketChannelEvent")," isn't enough to create a websocket connection. There some other settings\nthat one might need to configure in a websocket connection, things such as ",(0,r.kt)("inlineCode",{parentName:"p"},"handshakeTimeout")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"subProtocol")," etc. For\nthose purposes a Http of the type ",(0,r.kt)("inlineCode",{parentName:"p"},"Http[R, E, WebSocketChannelEvent, Unit]")," needs to converted into a ",(0,r.kt)("inlineCode",{parentName:"p"},"SocketApp")," using\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"toSocketApp")," method first, before it can be sent as a response. Consider the following example where we set a few\naddtional properties for the websocket connection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'socket\n  .toSocketApp\n  .withDecoder(SocketDecoder.skipUTF8Validation)\n  .withEncoder(SocketProtocol.subProtocol("json") ++ SocketProtocol.handshakeTimeout(5 seconds))\n  .toResponse\n')))}h.isMDXComponent=!0}}]);