"use strict";(self.webpackChunkzio_http_docs=self.webpackChunkzio_http_docs||[]).push([[261],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return n?a.createElement(h,l(l({ref:t},d),{},{components:n})):a.createElement(h,l({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7978:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return d}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),l=["components"],o={sidebar_position:"8"},s="Middleware",p={unversionedId:"v1.x/dsl/middleware",id:"v1.x/dsl/middleware",isDocsHomePage:!1,title:"Middleware",description:'What is a "Middleware"?',source:"@site/docs/v1.x/dsl/middleware.md",sourceDirName:"v1.x/dsl",slug:"/v1.x/dsl/middleware",permalink:"/zio-http/docs/v1.x/dsl/middleware",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Cookie",permalink:"/zio-http/docs/v1.x/dsl/cookies"},next:{title:"Socket",permalink:"/zio-http/docs/v1.x/dsl/socket/socket"}},d=[{value:"What is a &quot;Middleware&quot;?",id:"what-is-a-middleware",children:[{value:"The polluted code violates the principle of &quot;Separation of concerns&quot;",id:"the-polluted-code-violates-the-principle-of-separation-of-concerns",children:[],level:4}],level:2},{value:"Need for middlewares and handling &quot;aspects&quot;",id:"need-for-middlewares-and-handling-aspects",children:[{value:"Cleaned up code using middleware to address cross-cutting concerns like auth, request/response logging, etc.",id:"cleaned-up-code-using-middleware-to-address-cross-cutting-concerns-like-auth-requestresponse-logging-etc",children:[],level:4}],level:2},{value:"Middleware in zio-http",id:"middleware-in-zio-http",children:[{value:"Revisiting HTTP",id:"revisiting-http",children:[],level:4},{value:"Attaching middleware to Http",id:"attaching-middleware-to-http",children:[],level:4},{value:"A simple middleware example",id:"a-simple-middleware-example",children:[],level:4},{value:"Advanced example showing the transformative power of a middleware (Optional)",id:"advanced-example-showing-the-transformative-power-of-a-middleware-optional",children:[],level:3}],level:2},{value:"Creating Middleware",id:"creating-middleware",children:[],level:2},{value:"Combining middlewares",id:"combining-middlewares",children:[{value:"Using <code>++</code> combinator",id:"using--combinator",children:[{value:"A simple example using <code>++</code> combinator",id:"a-simple-example-using--combinator",children:[],level:4}],level:3},{value:"Using <code>&gt;&gt;&gt;</code>",id:"using-",children:[],level:3},{value:"Using <code>&lt;&gt;</code> combinator",id:"using--combinator-1",children:[{value:"A simple example using <code>&lt;&gt;</code>",id:"a-simple-example-using-",children:[],level:4},{value:"other operators",id:"other-operators",children:[],level:4}],level:3}],level:2},{value:"Transforming Middlewares (some advanced examples)",id:"transforming-middlewares-some-advanced-examples",children:[{value:"Transforming the output of the output <code>Http</code>",id:"transforming-the-output-of-the-output-http",children:[],level:3},{value:"Transforming the Input of the output <code>Http</code>",id:"transforming-the-input-of-the-output-http",children:[],level:3}],level:2},{value:"Conditional application of middlewares",id:"conditional-application-of-middlewares",children:[],level:2},{value:"A complete example of a middleware",id:"a-complete-example-of-a-middleware",children:[{value:"A few &quot;Out of the box&quot; middlewares",id:"a-few-out-of-the-box-middlewares",children:[],level:3}],level:2}],u={toc:d};function c(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"middleware"},"Middleware"),(0,r.kt)("h2",{id:"what-is-a-middleware"},'What is a "Middleware"?'),(0,r.kt)("p",null,"Before introducing middleware, let us understand why they are needed."),(0,r.kt)("p",null,"Consider the following example where we have two endpoints within HttpApp"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"GET a single user by id"),(0,r.kt)("li",{parentName:"ul"},"GET all users")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'  private val app = Http.collectZIO[Request] {\n    case Method.GET -> !! / "users" / id =>\n      // core business logic  \n      dbService.lookupUsersById(id).map(Response.json(_.json))\n    case Method.GET -> !! / "users"    =>\n      // core business logic  \n      dbService.paginatedUsers(pageNum).map(Response.json(_.json))\n  }\n')),(0,r.kt)("h4",{id:"the-polluted-code-violates-the-principle-of-separation-of-concerns"},'The polluted code violates the principle of "Separation of concerns"'),(0,r.kt)("p",null,"As our application grows, we want to code the following aspects like"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Basic Auth"),(0,r.kt)("li",{parentName:"ul"},"Request logging"),(0,r.kt)("li",{parentName:"ul"},"Response logging"),(0,r.kt)("li",{parentName:"ul"},"Timeout and retry")),(0,r.kt)("p",null,"For both of our example endpoints, our core business logic gets buried under boilerplate like this"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"            (for {\n                // validate user\n                _    <- MyAuthService.doAuth(request)\n                // log request\n                _    <- logRequest(request)\n                // core business logic\n                user <- dbService.lookupUsersById(id).map(Response.json(_.json))\n                resp <- Response.json(user.toJson)\n                // log response\n                _    <- logResponse(resp)                \n            } yield resp)\n                    .timeout(2.seconds)\n                    .retryN(5)\n")),(0,r.kt)("p",null,"Imagine repeating this for all our endpoints!!!"),(0,r.kt)("p",null,"So there are two problems with this approach"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We are dangerously coupling our business logic with cross-cutting concerns (like applying timeouts)"),(0,r.kt)("li",{parentName:"ul"},"Also, addressing these concerns will require updating code for every single route in the system. For 100 routes we will need to repeat 100 timeouts!!!"),(0,r.kt)("li",{parentName:"ul"},"For example, any change related to a concern like the logging mechanism from logback to log4j2 may cause changing signature of ",(0,r.kt)("inlineCode",{parentName:"li"},"log(..)")," function in 100 places."),(0,r.kt)("li",{parentName:"ul"},"On the other hand, this also makes testing core business logic more cumbersome.")),(0,r.kt)("p",null,"This can lead to a lot of boilerplate clogging our neatly written endpoints affecting readability, thereby leading to increased maintenance costs."),(0,r.kt)("h2",{id:"need-for-middlewares-and-handling-aspects"},'Need for middlewares and handling "aspects"'),(0,r.kt)("p",null,'If we refer to Wikipedia for the definition of an "',(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Aspect_(computer_programming)"},"Aspect"),'" we can glean the following points.'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An aspect of a program is a feature linked to many other parts of the program (",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"most common example, logging")),")., "),(0,r.kt)("li",{parentName:"ul"},"But it is not related to the program's primary function (",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"core business logic")),") "),(0,r.kt)("li",{parentName:"ul"},"An aspect crosscuts the program's core concerns (",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"for example logging code intertwined with core business logic")),"),  "),(0,r.kt)("li",{parentName:"ul"},'Therefore, it can violate the principle of "separation of concerns" which tries to encapsulate unrelated functions. (',(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"Code duplication and maintenance nightmare")),")")),(0,r.kt)("p",null,"Or in short, aspect is a common concern required throughout the application, and its implementation could lead to repeated boilerplate code and in violation of the principle of separation of concerns.\nThere is a paradigm in the programming world called ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Aspect-oriented_programming"},"aspect-oriented programming")," that aims for modular handling of these common concerns in an application. "),(0,r.kt)("p",null,'Some examples of common "aspects" required throughout the application'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"logging,"),(0,r.kt)("li",{parentName:"ul"},"timeouts (preventing long-running code)"),(0,r.kt)("li",{parentName:"ul"},"retries (or handling flakiness for example while accessing third party APIs)"),(0,r.kt)("li",{parentName:"ul"},"authenticating a user before using the REST resource (basic, or custom ones like OAuth / single sign-on, etc).")),(0,r.kt)("p",null,"This is where middleware comes to the rescue.\nUsing middlewares we can compose out-of-the-box middlewares (or our custom middlewares) to address the above-mentioned concerns using ++ and @@ operators as shown below."),(0,r.kt)("h4",{id:"cleaned-up-code-using-middleware-to-address-cross-cutting-concerns-like-auth-requestresponse-logging-etc"},"Cleaned up code using middleware to address cross-cutting concerns like auth, request/response logging, etc."),(0,r.kt)("p",null,"Observe, how we can address multiple cross-cutting concerns using neatly composed middlewares, in a single place."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'// compose basic auth, request/response logging, timeouts middlewares\nval composedMiddlewares = Middleware.basicAuth("user","pw") ++ \n        Middleware.debug ++ \n        Middleware.timeout(5 seconds) \n')),(0,r.kt)("p",null,"And then we can attach our composed bundle of middlewares to an Http using ",(0,r.kt)("inlineCode",{parentName:"p"},"@@")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'private val app = Http.collectZIO[Request] {\n  case Method.GET -> !! / "users" / id =>\n    // core business logic  \n    dbService.lookupUsersById(id).map(Response.json(_.json))\n  case Method.GET -> !! / "users"    =>\n    // core business logic  \n    dbService.paginatedUsers(pageNum).map(Response.json(_.json))\n} @@ composedMiddlewares // attach composedMiddlewares to the app using @@\n')),(0,r.kt)("p",null,"Observe how we gained the following benefits by using middlewares"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Readability"),": de-cluttering business logic."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Modularity"),": we can manage aspects independently without making changes in 100 places. For example, ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"replacing the logging mechanism from logback to log4j2 will require a change in one place, the logging middleware."),(0,r.kt)("li",{parentName:"ul"},"replacing the authentication mechanism from OAuth to single sign-on will require changing the auth middleware"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Testability"),": we can test our aspects independently.")),(0,r.kt)("h2",{id:"middleware-in-zio-http"},"Middleware in zio-http"),(0,r.kt)("p",null,"A middleware helps in addressing common crosscutting concerns without duplicating boilerplate code."),(0,r.kt)("h4",{id:"revisiting-http"},"Revisiting HTTP"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://dream11.github.io/zio-http/docs/v1.x/dsl/http"},(0,r.kt)("inlineCode",{parentName:"a"},"Http"))," is the most fundamental type for modeling Http applications"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Http[-R, +E, -A, +B]")," is equivalent to ",(0,r.kt)("inlineCode",{parentName:"p"},"(A) => ZIO[R, Option[E], B]")," where"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"R")," type of Environment "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"E")," type of the Error when the function fails with Some","[E]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"A")," is the type of input given to the Http"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"B")," type of the output produced by the Http ")),(0,r.kt)("p",null,"Middleware is simply a function that takes one ",(0,r.kt)("inlineCode",{parentName:"p"},"Http")," as a parameter and returns a new ",(0,r.kt)("inlineCode",{parentName:"p"},"Http")," with some enhanced capabilities.,"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Http => Http")),(0,r.kt)("p",null,"So, a middleware represents function transformation f1 => f2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"type Middleware[R, E, AIn, BIn, AOut, BOut] = Http[R, E, AIn, BIn] => Http[R, E, AOut, BOut]\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AIn")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"BIn")," are type params of the input ",(0,r.kt)("inlineCode",{parentName:"li"},"Http")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AOut")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"BOut")," are type params of the output ",(0,r.kt)("inlineCode",{parentName:"li"},"Http"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"HttpApp")," is a specialized Http with ",(0,r.kt)("inlineCode",{parentName:"p"},"Request")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Response")," as input and output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"type HttpApp[-R,+E] = Http[R, E, Request, Response]\n")),(0,r.kt)("p",null,"In the  ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpApp")," context, a middleware can modify requests and responses and also transform them into more concrete domain entities."),(0,r.kt)("h4",{id:"attaching-middleware-to-http"},"Attaching middleware to Http"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@@")," operator is used to attach a middleware to an Http. Example below shows a middleware attached to an HttpApp"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val app = Http.collect[Request] {\n  case Method.GET -> !! / name => Response.text(s"Hello $name")\n}\nval appWithMiddleware = app @@ Middleware.debug\n')),(0,r.kt)("p",null,"Logically the code above translates to ",(0,r.kt)("inlineCode",{parentName:"p"},"Middleware.debug(app)")),(0,r.kt)("h4",{id:"a-simple-middleware-example"},"A simple middleware example"),(0,r.kt)("p",null,"Let us consider a simple example using out-of-the-box middleware called ",(0,r.kt)("inlineCode",{parentName:"p"},"addHeader"),"\nWe will write a middleware that will attach a custom header to the response. "),(0,r.kt)("p",null,"Start with imports"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import zhttp.http._\nimport zhttp.service.Server\nimport zio.console.{putStrLn}\nimport zio.{App, ExitCode, URIO}\n")),(0,r.kt)("p",null,"We create a middleware that appends an additional header to the response indicating whether it is a Dev/Prod/Staging environment."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'lazy val patchEnv = Middleware.addHeader("X-Environment", "Dev")\n')),(0,r.kt)("p",null,"A test HttpApp with attached middleware"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val app = Http.collect[Request] {\n  case Method.GET -> !! / name => Response.text(s"Hello $name")\n}\nval appWithMiddleware = app @@ patchEnv\n')),(0,r.kt)("p",null,"Start the server "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val server = Server.start(8090, appWithMiddleware).exitCode\nzio.Runtime.default.unsafeRunSync(server)\n")),(0,r.kt)("p",null,'Fire a curl request and we see an additional header added to the response indicating the "Dev" environment'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"curl -i http://localhost:8090/Bob\n\nHTTP/1.1 200 OK\ncontent-type: text/plain\nX-Environment: Dev\ncontent-length: 12\n\nHello Bob\n")),(0,r.kt)("h3",{id:"advanced-example-showing-the-transformative-power-of-a-middleware-optional"},"Advanced example showing the transformative power of a middleware (Optional)"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Here is a slightly longer example to explore how powerful middleware transformation can be. It shows",(0,r.kt)("ul",null,(0,r.kt)("li",null,"How we can define a service purely in terms of our domain types"),(0,r.kt)("li",null,'Define a "codec" middleware for decoding requests and encoding responses to and from domain types'),(0,r.kt)("li",null,"Transform our regular `Http` service to an HttpApp by applying our codec middleware")),(0,r.kt)("b",null,(0,r.kt)("i",null,"Note: In real life, we will be using REST endpoints for defining routes. Although you can skip this section, this example gives a deeper insight into middleware."))),(0,r.kt)("p",null,"Start with imports"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import zhttp.http.{Http, HttpError, Middleware, Request, Response}\nimport zio.{ExitCode, URIO, ZEnv, ZIO}\nimport zio.json._\nimport zhttp.service._\n")),(0,r.kt)("p",null,'Define some "User" domain types'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"final case class User(name: String, email: String, id: String)\nobject User {\n  implicit val codec: JsonCodec[User] = DeriveJsonCodec.gen[User]\n}\nsealed trait UsersRequest\nobject UsersRequest {\n  final case class Get(id: Int)                        extends UsersRequest\n  final case class Create(name: String, email: String) extends UsersRequest\n  implicit val decoder: JsonDecoder[UsersRequest] = DeriveJsonDecoder.gen[UsersRequest]\n}\nsealed trait UsersResponse\nobject UsersResponse {\n  final case class Got(user: User)     extends UsersResponse\n  final case class Created(user: User) extends UsersResponse\n\n  implicit val encoder: JsonEncoder[UsersResponse] = DeriveJsonEncoder.gen[UsersResponse]\n}\n")),(0,r.kt)("p",null,"Define a Users service ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"purely in terms of our types"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'  val usersService: Http[Any, Nothing, UsersRequest, UsersResponse] = Http.collect {\n    case UsersRequest.Create(name, email) => {\n      UsersResponse.Created(User(name, email, "abc123"))\n    }\n    case UsersRequest.Get(id)             => {\n      UsersResponse.Got(User(id.toString, "", ""))\n    }\n  }\n')),(0,r.kt)("p",null,"A codec middleware which transforms an ",(0,r.kt)("inlineCode",{parentName:"p"},"Http")," with different input/output types to ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpApp")," with ",(0,r.kt)("strong",{parentName:"p"},"Request and Response")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'  def codecMiddleware[In: JsonDecoder, Out: JsonEncoder]: Middleware[Any,Nothing,In,Out,Request,Response] =\n    Middleware.codecZIO[Request,Out](\n      // deserialize the request into In type or fail with some message\n      request =>\n        for{\n          body <- request.getBodyAsString\n          in   <- ZIO.fromEither(JsonDecoder[In].decodeJson(body))\n        } yield in,\n      out => {\n        for {\n          charSeq <- ZIO(JsonEncoder[Out].encodeJson(out, None))\n        } yield Response.json(charSeq.toString)\n      }\n    ) <> Middleware.succeed(Response.fromHttpError(HttpError.BadRequest("Invalid JSON")))\n')),(0,r.kt)("p",null,"Let us transform our regular Http with UserService to an HttpApp using our codec middleware"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val transformedHttpApp: Http[Any, Nothing, Request, Response] =\n    usersService @@ codecMiddleware[UsersRequest,UsersResponse]\n")),(0,r.kt)("p",null,"Just observe how our service ",(0,r.kt)("inlineCode",{parentName:"p"},"Http")," got transformed to ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpApp")," by applying middleware"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Http[Any, Nothing, UsersRequest, UsersResponse]")," ===> ",(0,r.kt)("inlineCode",{parentName:"p"},"Http[Any, Nothing, Request, Response]")," (HttpApp)"),(0,r.kt)("p",null,"Start the server"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val server = Server.start(8090, transformedHttpApp)\nzio.Runtime.default.unsafeRunSync(server)\n")),(0,r.kt)("p",null,"Fire a curl request along with the request body"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'curl -i -d \'{ "Create":{ "name":"Sum", "email": "s@d1.com" }}\' http://localhost:8090/\n')),(0,r.kt)("p",null,"Observe the response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'HTTP/1.1 200 OK\ncontent-type: application/json\ncontent-length: 68\n\n{"Created":{"user":{"name":"Sum","email":"s@d1.com","id":"abc123"}}\n'))),(0,r.kt)("h2",{id:"creating-middleware"},"Creating Middleware"),(0,r.kt)("p",null,"Refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dream11/zio-http/blob/main/zio-http/src/main/scala/zhttp/http/Middleware.scala"},"Middleware.scala")," for various ways of creating a middleware."),(0,r.kt)("p",null,'Again remember that a "middleware" is just a ',(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"transformative function")),". There are ways of creating such transformative functions:  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"identity"),": works like an ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Identity_function"},"identity function")," in mathematics\n",(0,r.kt)("inlineCode",{parentName:"li"},"f(x) = x"),".\nIt returns the same ",(0,r.kt)("inlineCode",{parentName:"li"},"Http")," as input without doing any modification")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val identityMW: Middleware[Any, Nothing, Nothing, Any, Any, Nothing] = Middleware.identity\napp @@ identityMW // no effect on the http app.\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"succeed")," creates a middleware that always returns the output ",(0,r.kt)("inlineCode",{parentName:"li"},"Http")," that succeeds with the given value and never fails.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val middleware: Middleware[Any, Nothing, Nothing, Any, Any, Int] = Middleware.succeed(1)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"fail")," creates a middleware that always returns the output ",(0,r.kt)("inlineCode",{parentName:"li"},"Http")," that always fails.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val middleware: Middleware[Any, String, Nothing, Any, Any, Nothing] = Middleware.fail("error")\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"collect")," creates middleware using a specified function")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val middleware: Middleware[Any, Nothing, Request, Response, Request, Response] = Middleware.collect[Request](_ => Middleware.addHeaders(Headers("a", "b")))\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"collectZIO")," creates middleware using a specified effect function")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val middleware: Middleware[Any, Nothing, Request, Response, Request, Response] = Middleware.collectZIO[Request](_ => ZIO.succeed(Middleware.addHeaders(Headers("a", "b"))))\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"codec")," takes two functions ",(0,r.kt)("inlineCode",{parentName:"li"},"decoder: AOut => Either[E, AIn]")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"encoder: BIn => Either[E, BOut]"))),(0,r.kt)("p",null,"The below snippet takes two functions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"decoder function to decode Request to String"),(0,r.kt)("li",{parentName:"ul"},"encoder function to encode String to Response")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val middleware: Middleware[Any, Nothing, String, String, Request, Response] = Middleware.codec[Request,String](r => Right(r.method.toString()), s => Right(Response.text(s)))\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"fromHttp")," creates a middleware with output ",(0,r.kt)("inlineCode",{parentName:"li"},"Http")," as specified ",(0,r.kt)("inlineCode",{parentName:"li"},"http"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val app: Http[Any, Nothing, Any, String] = Http.succeed("Hello World!")\nval middleware: Middleware[Any, Nothing, Nothing, Any, Request, Response] = Middleware.fromHttp(app)\n')),(0,r.kt)("h2",{id:"combining-middlewares"},"Combining middlewares"),(0,r.kt)("p",null,"Middlewares can be combined using several special operators like ",(0,r.kt)("inlineCode",{parentName:"p"},"++"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"<>")," and ",(0,r.kt)("inlineCode",{parentName:"p"},">>>")),(0,r.kt)("h3",{id:"using--combinator"},"Using ",(0,r.kt)("inlineCode",{parentName:"h3"},"++")," combinator"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"++")," is an alias for ",(0,r.kt)("inlineCode",{parentName:"p"},"combine"),". It combines two middlewares ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"without changing their input/output types (",(0,r.kt)("inlineCode",{parentName:"em"},"AIn")," = ",(0,r.kt)("inlineCode",{parentName:"em"},"AOut")," / ",(0,r.kt)("inlineCode",{parentName:"em"},"BIn")," = ",(0,r.kt)("inlineCode",{parentName:"em"},"BOut"),")"))),(0,r.kt)("p",null,"For example, if we have three middlewares f1, f2, f3"),(0,r.kt)("p",null,"f1 ++ f2 ++ f3 applies on an ",(0,r.kt)("inlineCode",{parentName:"p"},"http"),", from left to right with f1 first followed by others, like this "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"  f3(f2(f1(http)))\n")),(0,r.kt)("h4",{id:"a-simple-example-using--combinator"},"A simple example using ",(0,r.kt)("inlineCode",{parentName:"h4"},"++")," combinator"),(0,r.kt)("p",null,"Start with imports"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import zhttp.http.Middleware.basicAuth\nimport zhttp.http._\nimport zhttp.service.Server\nimport zio.console.putStrLn\nimport zio.{App, ExitCode, URIO}\n")),(0,r.kt)("p",null,"A user app with single endpoint that welcomes a user"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val userApp: UHttpApp = Http.collect[Request] { case Method.GET -> !! / "user" / name / "greet" =>\n  Response.text(s"Welcome to the ZIO party! ${name}")\n}\n')),(0,r.kt)("p",null,"A basicAuth middleware with hardcoded user pw and another patches response with environment value "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val basicAuthMW = basicAuth("admin", "admin")\nlazy val patchEnv = Middleware.addHeader("X-Environment", "Dev")\n// apply combined middlewares to the userApp\nval appWithMiddleware = userApp @@ (basicAuthMW ++ patchEnv)\n')),(0,r.kt)("p",null,"Start the server"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val server = Server.start(8090, appWithMiddleware).exitCode\nzio.Runtime.default.unsafeRunSync(server)\n")),(0,r.kt)("p",null,"Fire a curl request with an incorrect user/password combination"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"curl -i --user admin:wrong http://localhost:8090/user/admin/greet\n\nHTTP/1.1 401 Unauthorized\nwww-authenticate: Basic\nX-Environment: Dev\ncontent-length: 0\n")),(0,r.kt)("p",null,"We notice in the response that first basicAuth middleware responded ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP/1.1 401 Unauthorized")," and then patch middleware attached a ",(0,r.kt)("inlineCode",{parentName:"p"},"X-Environment: Dev")," header. "),(0,r.kt)("h3",{id:"using-"},"Using ",(0,r.kt)("inlineCode",{parentName:"h3"},">>>")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},">>>")," is an alias for ",(0,r.kt)("inlineCode",{parentName:"p"},"andThen")," and similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"++")," with one BIG difference ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"input/output types can be different (",(0,r.kt)("inlineCode",{parentName:"em"},"AIn"),"\u2260 ",(0,r.kt)("inlineCode",{parentName:"em"},"AOut")," / ",(0,r.kt)("inlineCode",{parentName:"em"},"BIn"),"\u2260 ",(0,r.kt)("inlineCode",{parentName:"em"},"BOut"),")")),(0,r.kt)("br",{parentName:"p"}),"\n","Whereas, in the case of ",(0,r.kt)("inlineCode",{parentName:"p"},"++")," types remain the same (horizontal composition)."),(0,r.kt)("p",null,"For example, if we have three middlewares f1, f2, f3"),(0,r.kt)("p",null,"f1 >>> f2 >>> f3 applies on an ",(0,r.kt)("inlineCode",{parentName:"p"},"http"),", sequentially feeding an http to f1 first followed by f2 and f3."),(0,r.kt)("p",null,"f1(http) => http1\nf2(http1) => http2"),(0,r.kt)("h3",{id:"using--combinator-1"},"Using ",(0,r.kt)("inlineCode",{parentName:"h3"},"<>")," combinator"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<>")," is an alias for ",(0,r.kt)("inlineCode",{parentName:"p"},"orElse"),". While using ",(0,r.kt)("inlineCode",{parentName:"p"},"<>"),", if the output ",(0,r.kt)("inlineCode",{parentName:"p"},"Http")," of the first middleware fails, the second middleware will be evaluated, ignoring the result from the first."),(0,r.kt)("h4",{id:"a-simple-example-using-"},"A simple example using ",(0,r.kt)("inlineCode",{parentName:"h4"},"<>")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val middleware: Middleware[Any, Nothing, Request, Response, Request, Response] = Middleware.fail("error") <> Middleware.addHeader("X-Environment", "Dev")\n')),(0,r.kt)("h4",{id:"other-operators"},"other operators"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"contraMap"),",",(0,r.kt)("strong",{parentName:"p"},"contraMapZIO"),",",(0,r.kt)("strong",{parentName:"p"},"delay"),",",(0,r.kt)("strong",{parentName:"p"},"flatMap"),",",(0,r.kt)("strong",{parentName:"p"},"flatten"),",",(0,r.kt)("strong",{parentName:"p"},"map"),": which are obvious as their name implies.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"race")," to race middlewares")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"runAfter")," and ",(0,r.kt)("strong",{parentName:"p"},"runBefore")," to run effect before and after")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"when")," to conditionally run a middleware (input of output Http meets some criteria)"))),(0,r.kt)("h2",{id:"transforming-middlewares-some-advanced-examples"},"Transforming Middlewares (some advanced examples)"),(0,r.kt)("h3",{id:"transforming-the-output-of-the-output-http"},"Transforming the output of the output ",(0,r.kt)("inlineCode",{parentName:"h3"},"Http")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We can use ",(0,r.kt)("inlineCode",{parentName:"li"},"flatMap")," or  ",(0,r.kt)("inlineCode",{parentName:"li"},"map")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"mapZIO")," for transforming the output type of output Http")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val middleware: Middleware[Any, Nothing, Nothing, Any, Any, Int] = Middleware.succeed(3)\n\nval mid1: Middleware[Any, Nothing, Nothing, Any, Any, String] = middleware.map((i: Int) => i.toString)\nval mid2: Middleware[Any, Nothing, Nothing, Any, Any, String] = middleware.mapZIO((i: Int) => ZIO.succeed(s"$i"))\nval mid3: Middleware[Any, Nothing, Nothing, Any, Any, String] = middleware.flatMap((m: Int) => Middleware.succeed(m.toString))\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We can use ",(0,r.kt)("inlineCode",{parentName:"p"},"intercept")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"interceptZIO")," to create a new middleware using transformation functions, which changes the output type of the output ",(0,r.kt)("inlineCode",{parentName:"p"},"Http")," keeping input the same."),(0,r.kt)("p",{parentName:"li"},"The below snippet takes two functions:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"(incoming: A => S)"),(0,r.kt)("li",{parentName:"ul"},"(outgoing: (B, S) => BOut) ")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val middleware: Middleware[Any, Nothing, String, String, String, Int] = Middleware.intercept[String, String](_.toInt + 2)((_, a) => a + 3)\n  \nval mid: Middleware[Any, Nothing, Int, Int, Int, Int] = Middleware.interceptZIO[Int, Int](i => UIO(i * 10))((i, j) => UIO(i + j))\n")),(0,r.kt)("h3",{id:"transforming-the-input-of-the-output-http"},"Transforming the Input of the output ",(0,r.kt)("inlineCode",{parentName:"h3"},"Http")),(0,r.kt)("p",null,"We can use ",(0,r.kt)("inlineCode",{parentName:"p"},"contramap")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"contramapZIO")," for transforming the input type of the output ",(0,r.kt)("inlineCode",{parentName:"p"},"Http")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val middleware: Middleware[Any, Nothing, Int, Int, Int, Int] = Middleware.codec[Int, Int](decoder = a => Right(a + 1), encoder = b => Right(b + 1))\n\nval mid1: Middleware[Any, Nothing, Int, Int, String, Int] = middleware.contramap[String](_.toInt)\nval mid2: Middleware[Any, Nothing, Int, Int, String, Int] = middleware.contramapZIO[String](a => UIO(a.toInt))\n")),(0,r.kt)("h2",{id:"conditional-application-of-middlewares"},"Conditional application of middlewares"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"when")," applies middleware only if the condition function evaluates to true")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val middleware: Middleware[Any, Nothing, Nothing, Any, Any, String] = Middleware.succeed("yes")\nval mid: Middleware[Any, Nothing, Nothing, Any, String, String] = middleware.when[String]((str: String) => str.length > 2)\n')),(0,r.kt)("p",null,"-",(0,r.kt)("inlineCode",{parentName:"p"},"whenZIO")," applies middleware only if the condition function(with effect) evaluates"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val middleware: Middleware[Any, Nothing, Nothing, Any, Any, String] = Middleware.succeed("yes")\nval mid: Middleware[Any, Nothing, Nothing, Any, String, String] = middleware.whenZIO[Any, Nothing, String]((str: String) => UIO(str.length > 2))\n')),(0,r.kt)("p",null,"Logical operators to decide which middleware to select based on the predicate:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Using ",(0,r.kt)("inlineCode",{parentName:"li"},"ifThenElse")," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val mid: Middleware[Any, Nothing, Nothing, Any, Int, Int] = Middleware.ifThenElse[Int](_ > 5)(\n    isTrue = i => Middleware.succeed(i + 1),\n    isFalse = i => Middleware.succeed(i - 1)\n  )\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Using ",(0,r.kt)("inlineCode",{parentName:"li"},"ifThenElseZIO")," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val mid: Middleware[Any, Nothing, Nothing, Any, Int, Int] = Middleware.ifThenElseZIO[Int](i => UIO(i > 5))(\n    isTrue = i => Middleware.succeed(i + 1),\n    isFalse = i => Middleware.succeed(i - 1),\n  )\n")),(0,r.kt)("h2",{id:"a-complete-example-of-a-middleware"},"A complete example of a middleware"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,'Detailed example showing "debug" and "addHeader" middlewares')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'    import zhttp.http._\n    import zhttp.http.middleware.HttpMiddleware\n    import zhttp.service.Server\n    import zio.clock.{Clock, currentTime}\n    import zio.console.Console\n    import zio.duration._\n    import zio.{App, ExitCode, URIO, ZIO}\n    \n    import java.io.IOException\n    import java.util.concurrent.TimeUnit\n    \n     val app: HttpApp[Clock, Nothing] = Http.collectZIO[Request] {\n       // this will return result instantly\n       case Method.GET -> !! / "text"         => ZIO.succeed(Response.text("Hello World!"))\n       // this will return result after 5 seconds, so with 3 seconds timeout it will fail\n       case Method.GET -> !! / "long-running" => ZIO.succeed(Response.text("Hello World!")).delay(5 seconds)\n     }\n\n    val middlewares: HttpMiddleware[Console with Clock, IOException] =\n       // print debug info about request and response\n       Middleware.debug ++\n       // add static header\n       Middleware.addHeader("X-Environment", "Dev") ++   \n\n   override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n       Server.start(8090, (app @@ middlewares)).exitCode\n'))),(0,r.kt)("h3",{id:"a-few-out-of-the-box-middlewares"},'A few "Out of the box" middlewares'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://dream11.github.io/zio-http/docs/v1.x/examples/advanced-examples/middleware_basic_auth"},"Basic Auth")," "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://dream11.github.io/zio-http/docs/v1.x/examples/advanced-examples/middleware_cors"},"CORS")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://dream11.github.io/zio-http/docs/v1.x/examples/advanced-examples/middleware_csrf"},"CSRF"))))}c.isMDXComponent=!0}}]);